class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
       
       // Complexity time - O(N*M) / space - O(M)
        // int n= nums2.length;
        // int m = nums1.length;
        // int res[] = new int[m];
        // Arrays.fill(res,-1);
        // Map<Integer,Integer> map = new HashMap<>();
        // for(int i=0; i<m; i++)
        // {
        //     map.put(nums1[i],i);
        // }

        // for(int i=0; i<n; i++)
        // {
            
        //     if(map.containsKey(nums2[i])){
        //         if(i==n-1){
        //         continue;
        //         }
        //         for(int j=i+1; j<n; j++)
        //         {
        //             if(nums2[j]>nums2[i])
        //             {
        //                 res[map.get(nums2[i])] = nums2[j];
        //                 break;
        //             }
        //         }
        //     }
        // }
        
//   return res; 

// Complexity time - O(N+M) / space - O(M)
   int n= nums2.length;
        int m = nums1.length;
        int res[] = new int[m];
        Arrays.fill(res,-1);
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<m; i++)
        {
            map.put(nums1[i],i);
        }
        Stack<Integer> s = new Stack<>();

        for(int i=0; i<n; i++){
            int cur = nums2[i];
            while(!s.isEmpty() && cur>s.peek())
            {
                int val = s.pop();
                int ind = map.get(val);
                res[ind] = cur;
            }
            if(map.containsKey(cur)){
                s.push(cur);
            }
        }
  return res;
  }
}
