// brute force technique with two passes
// Space and Time Complexity - O(n) in real O(2n) and O(1)

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode temp = head;
        int count =0;
        while(temp != null) {
            count++;
            temp = temp.next;
             }
            if(count== n)
            {
                return head.next;
            }       
        temp = head;
        for(int i = 0; i <count - n - 1; i++) {
            temp = temp.next;
             }
        temp.next = temp.next.next;
        return head;

// Optimized solution with single pass 
// // Space and Time Complexity - O(n) and O(1)

ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode slow = dummy;
        ListNode fast = dummy;
        for(int i=0; i<=n; i++)
        {
            fast = fast.next;
        }
        while(fast != null)
        {
            fast = fast.next;
            slow = slow.next;
        }
        slow.next = slow.next.next;

        return dummy.next;
    }
}
