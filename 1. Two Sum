class Solution {
    public int[] twoSum(int[] nums, int target) {
         int[] value = {0,0};
    //complexity is Time - O(n^2) and Space - 0
     /*
        for(int i=0; i<nums.length-1; i++)
        {
             int s=i, e = i+1;
             while(e!= nums.length)
             {
                 if(nums[s]+nums[e]==target)
                 {
                     value[0]=s;
                     value[1]=e;
                     return value;
                 }
                 else
                 e++;

             }

        }
        return value;
        */
        // Time complexity O(n) & space complexity is O(n) 
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++)
        {
            if(map.containsKey(target-nums[i])){
                value[0]=map.get(target-nums[i]);
                value[1]=i;
            return value;
            }
            else
            {
                map.put(nums[i],i);
            }

        }
       
 return value;      
    }
}
