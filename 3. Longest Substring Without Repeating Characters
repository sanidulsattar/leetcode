// 3. Longest Substring Without Repeating Characters

// T.C - O(N^2) S.C -O(N)

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int ans = 0;
        int temp =0;
        Set set = new HashSet();
        for(int i=0; i<s.length(); i++)
        {
           for(int j=i; j<s.length(); j++){
            if(set.contains(s.charAt(j)))
            {
              set.clear(); 
              break;
            }
            else{
                set.add(s.charAt(j));
                temp++;
            }
            
           }
           ans = Math.max(ans,temp);
           temp=0;
        }
        
    return ans;


// Time Complexity: O(n), where n is the length of the input string s.
    // Space Complexity: O(min(n, m)), where m is the size of the character set.
   Set set = new HashSet();
   int l=0;
   int ans=0;
   for(int r=0; r<s.length(); r++)
   {
    while(set.contains(s.charAt(r)))
    {
        set.remove(s.charAt(l));
        l++;
    }
    set.add(s.charAt(r));
    ans = Math.max(ans,(r-l+1));
   }


  return ans;
}
}
