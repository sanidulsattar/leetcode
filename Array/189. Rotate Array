// Solution with extra n spaces
// Time and space Complexity - O(n) && O(n)

class Solution {
    public void rotate(int[] nums, int k) {

        int[] num = new int[nums.length];

        for(int i=0; i<nums.length; i++)
        {
            num[(i+k) % nums.length]= nums[i];
        }
        for(int i=0; i<nums.length; i++)
        {
            nums[i] = num[i];
        }
}

// Solution without extra spaces
// Time and space Complexity - O(n) && O(1)

class Solution {
    public void rotate(int[] nums, int k) {

        k = k % nums.length;
        int n = nums.length;
        reverse(nums,0, n-1 );
        reverse(nums, 0, k-1);
        reverse(nums, k, n-1);
       
    }
    public void reverse(int[] nums, int l, int r)
    {
        while(l<r)
        {
            int temp = nums[l];
            nums[l]=nums[r];
            nums[r]=temp;
            l++;
            r--;
        }
    }
}
