class Solution {
    public int subarraySum(int[] nums, int k) {
        // TC O(n) & SC O(n)

        int cursum =0;
        int count=0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++)
        {
            cursum = cursum + nums[i];
            if(cursum==k)
            {
                count++;
            }
            if(map.containsKey(cursum-k))
            {
                count = count + map.get(cursum-k);
            }
            if(map.containsKey(cursum))
            {
                map.put(cursum,map.get(cursum)+1);
            }
            else
            map.put(cursum,1);
        }
        return count;

        
        // TC O(n2) & SC O(1)
        /*
         * int temp = 0;
         * int count = 0;
         * for (int i = 0; i < nums.length; i++) {
         * for (int j = i; j < nums.length; j++) {
         * temp = temp + nums[j];
         * if (temp == k)
         * count++;
         * }
         * temp =0;
         * }
         * return count;
         */
        

    }
}
